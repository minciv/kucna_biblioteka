# -*- coding: utf-8 -*-
# @–ê—É—Ç–æ—Ä    : minciv
# @–§–∞—ò–ª     : logger.py
# @–í–µ—Ä–∑–∏—ò–∞  : 0.2.0
# @–ü—Ä–æ–≥—Ä–∞–º  : Windsurf
# @–û–ø–∏—Å     : –ú–æ–¥–µ—Ä–Ω–∏–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞ –ª–æ–≥–æ–≤–∞—ö–∞ –∑–∞ –∞–ø–ª–∏–∫–∞—Ü–∏—ò—É –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞

import logging
import logging.config
from typing import Optional
from config import LOG_CONFIG, LOG_PATH

# –ü–æ–∫—É—à–∞—ò –¥–∞ —É–≤–µ–∑–µ—à Rich, –∞–∫–æ –Ω–∏—ò–µ –¥–æ—Å—Ç—É–ø–∞–Ω –∫–æ—Ä–∏—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä–¥–Ω–æ –ª–æ–≥–æ–≤–∞—ö–µ
try:
    from rich.logging import RichHandler
    from rich.console import Console
    console = Console()
    RICH_AVAILABLE = True
except ImportError:
    RichHandler = None
    console = None
    RICH_AVAILABLE = False

def setup_logging(use_rich: bool = True, log_level: str = "INFO"):
    """
    –ü–æ–¥–µ—à–∞–≤–∞ –º–æ–¥–µ—Ä–Ω–∏–∑–æ–≤–∞–Ω—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò—É –ª–æ–≥–æ–≤–∞—ö–∞
    
    Args:
        use_rich: –ö–æ—Ä–∏—Å—Ç–∏ Rich –∑–∞ –±–æ—ô–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞—ö–µ –∏–∑–ª–∞–∑–∞
        log_level: –ù–∏–≤–æ –ª–æ–≥–æ–≤–∞—ö–∞ (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    """
    if use_rich and RICH_AVAILABLE:
        # –ú–æ–¥–µ—Ä–Ω–∏–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞ —Å–∞ Rich
        logging.basicConfig(
            level=getattr(logging, log_level.upper()),
            format="%(message)s",
            datefmt="[%X]",
            handlers=[
                RichHandler(
                    console=console,
                    show_time=True,
                    show_level=True,
                    show_path=True,
                    markup=True,
                    rich_tracebacks=True
                ),
                logging.FileHandler(
                    LOG_PATH, 
                    encoding='utf-8',
                    mode='a'
                )
            ]
        )
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞ –∑–∞ –∫–æ–º–ø–∞—Ç–∏–±–∏–ª–Ω–æ—Å—Ç
        logging.basicConfig(
            level=getattr(logging, log_level.upper()),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(
                    LOG_PATH, 
                    encoding='utf-8',
                    mode='a'
                )
            ]
        )

def get_logger(name: str) -> logging.Logger:
    """–í—Ä–∞—õ–∞ –∏–Ω—Å—Ç–∞–Ω—Ü—É –ª–æ–≥–µ—Ä–∞ —Å–∞ –¥–∞—Ç–∏–º –∏–º–µ–Ω–æ–º"""
    return logging.getLogger(name)

def log_app_info(message: str):
    """–õ–æ–≥—É—ò–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—ò–µ –æ –∞–ø–ª–∏–∫–∞—Ü–∏—ò–∏ —Å–∞ –ª–µ–ø–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞—ö–µ–º"""
    if RICH_AVAILABLE and console:
        console.print(f"[bold blue]üìö –ö—É—õ–Ω–∞ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:[/bold blue] {message}")
    else:
        print(f"üìö –ö—É—õ–Ω–∞ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {message}")

def log_success(message: str):
    """–õ–æ–≥—É—ò–µ —É—Å–ø–µ—à–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏—ò–µ"""
    if RICH_AVAILABLE and console:
        console.print(f"[bold green]‚úÖ –£—Å–ø–µ—Ö:[/bold green] {message}")
    else:
        print(f"‚úÖ –£—Å–ø–µ—Ö: {message}")

def log_warning(message: str):
    """–õ–æ–≥—É—ò–µ —É–ø–æ–∑–æ—Ä–µ—ö–∞"""
    if RICH_AVAILABLE and console:
        console.print(f"[bold yellow]‚ö†Ô∏è  –£–ø–æ–∑–æ—Ä–µ—ö–µ:[/bold yellow] {message}")
    else:
        print(f"‚ö†Ô∏è  –£–ø–æ–∑–æ—Ä–µ—ö–µ: {message}")

def log_error(message: str):
    """–õ–æ–≥—É—ò–µ –≥—Ä–µ—à–∫–µ"""
    if RICH_AVAILABLE and console:
        console.print(f"[bold red]‚ùå –ì—Ä–µ—à–∫–∞:[/bold red] {message}")
    else:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {message}")
